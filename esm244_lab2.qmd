---
title: "ESM 244 Lab 2 - Time Series"
author: "Max"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(tsibble) #for time series analysis
library(feasts) #feature extraction and statistics for time series
library(fable)
```

# Part 1: Time series with Toolik lake data

## Always look at your data

### Read in the data

```{r}
toolik_df <- read_csv(here("data/toolik_daily.csv"))

# convert data frame to time series

toolik_ts <- toolik_df %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  as_tsibble(key = NULL,   ### if we had multiple sites, key by site
             index = date) ### this is our time series variable

ggplot(toolik_ts, aes(x = date, y = daily_air_temp)) +
  geom_line() +
  labs(x = "Date", y = "Mean daily air temp (Celsius)\n at Toolik Station")
```

## Use filter_index() function to filter by date/time!

filter_index() is a variation on filter() for time series data

```{r}
### Filter from Dec 2010 to Jan 2011
toolik_ts %>% 
  filter_index("2010-12" ~ "2011-01")

### Filter from Jan 1 2018 to present
toolik_ts %>% 
  filter_index("2018-01-01" ~ .)
```

## Use index_by() to aggregate time series by increments

```{r}
toolik_month <- toolik_ts %>% 
  index_by(yr_mo = ~yearmonth(.)) %>%  #identify all combinations of year & month
  summarize(monthly_mean_temp = mean(daily_air_temp, na.rm = TRUE)) %>% 
  ungroup()
```

Now let's plot that!

```{r}
ggplot(data = toolik_month, aes(x = yr_mo, y = monthly_mean_temp)) +
  geom_line()

ggplot(toolik_month, aes(x = year(yr_mo), y = monthly_mean_temp)) +
  geom_line() +
  facet_wrap(~ month(yr_mo, label = TRUE)) +
  labs(x = "Year", y = "Annual mean air temp (Celsius)", 
       title = "Toolik Station mean annual air temperature", 
       subtitle = "1988-2023", 
       caption = "<put citation here>")
```

# Part 2: Time series wrangling and forescasting!

Energy usage by sector, in trillions on BTUs

```{r}
energy_df <- read_csv(here("data/energy.csv"))
```

### Analysis goals:

-   Examine patterns and trends in residential energy consumption over time
-   Predict what residential energy use patters will look like over the next 5 years

### Pseudo code

-   Start by visualizing the data to explore patterns and trends
-   Make figures with time on the x-axis and energy consumption on y-axis
-   Decompose the data? (use **"stats::decomposed()"**)
-   Set up the data for time series
-   Start forecasting?

- Convert year-month to date
- Exploratory plotting; develop an exploratory ggplot 
- 
- 

```{r}
energy_ts <- energy_df %>% 
  mutate(date = tsibble::yearmonth(yrmonth)) %>% #convert year-month to a date
  as_tsibble(index = date,
             key = sector) #convert to a time series
```

```{r}
ggplot(energy_ts, aes(x = date, y = energy_total, color = sector)) +
  geom_line() +
  labs(y = "Energy consumption by sector \n (Trillion BTUs)") +
  facet_wrap(~ sector, ncol = 1)
```

* Residential looks similar to commercial, with an upward trend at least for the first part, maybe leveling off or decreasing in recent years
* Seasonality - summer and winter peaks, summer peaks seem to be getting larger over time 

### Season plots 

```{r}
#Quick way to visualize time series data and look for seasonality 

energy_ts %>% 
  filter(sector == "residential") %>% 
  gg_season(y = energy_total, pal = hcl.colors(n = 9)) + #from the 'feasts' package
  theme_light() +
  labs(x = "Month", y = "Residential energy consumption (trillion BTUs)")
```

### Subseries plots 

```{r}
energy_ts %>% 
  gg_subseries(y = energy_total)
```

## Decomposition

```{r}
### Find the STL decomposition (S = seasonality, T = trend, L = LOESS)
### LOESS = locally estimated scatterplot smoothing 

dcmp <- energy_ts %>% 
  filter(sector == "residential") %>% 
  model(feasts::STL(energy_total ~ season(period = "1 year") + 
                      trend(window = 49)))

components(dcmp) %>% 
  autoplot() #takes different model types and turns it into a typical plot for data

# if the noise is smaller than the original data, that's a good sign (look at gray bar)
```

### Autocorrelation function 

```{r}
energy_ts %>% 
  filter(sector == "residential") %>% 
  ACF(energy_total) %>% 
  autoplot()

# ACF tells us how much weight I could give to data "x" years out and still have it be a good predictor 
```


## Forecasting by Holt Winters exponential smoothing 

Specify for each component, whether none ("N"), additive ("A"), or multiplicative ("M")
model() is the time series model function
```{r}
### Create a model 
energy_fit <- energy_ts %>% 
  filter(sector == "residential") %>% 
  filter_index("2000-01" ~ .) %>% 
  model(ets = ETS(energy_total ~ season(method = "M") + trend(method = "A"))) 

energy_forecast <- energy_fit %>% 
  forecast(h = "5 years") #create a forecast of 5 years

energy_forecast %>% 
  autoplot(energy_ts) #without 'energy_ts' it just shows the 5 yr forecast
```

```{r}
energy_predicted <- energy_fit %>% 
  broom::augment() 

ggplot(energy_predicted) +
  geom_line(aes(x = date, y = energy_total)) +
  geom_line(aes(x = date, y = .fitted), color = "red", alpha = 0.7)

ggplot(energy_predicted, aes(x = .resid)) +
  geom_histogram()
```










